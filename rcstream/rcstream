#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  RCStream: Broadcast MediaWiki recent changes over WebSockets

  Usage: rcstream [-h] [--debug] [--logfile LOGFILE] server redis

  positional arguments:
    SERVER_ADDRESS     Server address (host:port)
    REDIS_URL          URL of Redis instance

  optional arguments:
    -h, --help         show this help message and exit
    --debug            Log verbosely
    --logfile LOGFILE  Log to LOGFILE

  See <https://wikitech.wikimedia.org/wiki/rcstream> for more.

  Copyright 2014 Ori Livneh <ori@wikimedia.org>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

"""
from gevent import monkey
monkey.patch_all()

import argparse
import fnmatch
import json
import logging
import sys

import gevent
import redis
import socketio
import socketio.namespace
import socketio.server


log = logging.getLogger(__name__)


def parse_address(addr):
    """Parse a 'host:port' string into a (host: str, port: int) tuple."""
    host, port = addr.split(':')
    return host, int(port)


def match_any(string, patterns):
    """Test a collection of Unix shell-style patterns against a string."""
    return any(fnmatch.fnmatch(string, pattern) for pattern in patterns)


def subscription_sort_key(pattern):
    """Sort key for subscriptions that puts shorter wildcard patterns ahead."""
    return (len(pattern), '*' not in pattern, pattern)


class WsgiBackendLogAdapter(logging.LoggerAdapter):
    """Log adapter that annotates log records with client IP."""

    def process(self, msg, kwargs):
        # Security alert! We're assuming we're behind a proxy which sets
        # X-Forwarded-For. Otherwise this header could be spoofed!
        xff = self.extra.get('HTTP_X_FORWARDED_FOR', '').split(',')
        client_ip = xff[0] if xff else self.extra['REMOTE_ADDRESS']
        return '[%s] %s' % (client_ip, msg), kwargs


class WikiNamespace(socketio.namespace.BaseNamespace):
    """A socket.io namespace that allows clients to subscribe to the
    recent changes stream of individual wikis."""

    MAX_SUBSCRIPTIONS = 10

    def initialize(self):
        self.session['wikis'] = []
        self.logger = WsgiBackendLogAdapter(log, self.environ)

    def process_packet(self, packet):
        self.logger.info(json.dumps(packet, sort_keys=True))
        super(WikiNamespace, self).process_packet(packet)

    def on_subscribe(self, wikis):
        if not isinstance(wikis, list):
            wikis = [wikis]
        subscriptions = self.session['wikis']
        for wiki in wikis:
            if not isinstance(wiki, basestring):
                continue
            if wiki in subscriptions:
                continue
            if len(subscriptions) >= self.MAX_SUBSCRIPTIONS:
                return self.error('subscribe_error', 'Too many subscriptions')
            subscriptions.append(wiki)
            subscriptions.sort(key=subscription_sort_key)

    def on_unsubscribe(self, wikis):
        if not isinstance(wikis, list):
            wikis = [wikis]
        subscriptions = self.session['wikis']
        for wiki in wikis:
            try:
                subscriptions.remove(wiki)
            except ValueError:
                pass


class ChangesPubSub(socketio.server.SocketIOServer):
    """A socket.io WSGI server for recent changes."""

    namespaces = {'/rc': WikiNamespace}

    def __init__(self, server_address, redis_connection):
        self.queue = gevent.queue.Channel()
        self.redis_connection = redis_connection
        self.server_address = server_address
        super(ChangesPubSub, self).__init__(server_address, self.on_request)

    def serve_forever(self):
        for func in (self.publish, self.subscribe):
            greenlet = gevent.Greenlet(func)
            greenlet.link_exception(self.on_error)
            greenlet.start()
        super(ChangesPubSub, self).serve_forever()

    def get_stats(self):
        """Return a map with server metrics."""
        return {
            'connected_clients': len(self.sockets),
            'queue_size': self.queue.qsize()
        }

    def on_request(self, environ, start_response):
        """A WSGI application function."""
        if 'socketio' in environ:
            socketio.socketio_manage(environ, self.namespaces)
        if environ.get('PATH_INFO', '').strip('/') == 'rcstream_status':
            start_response('200 OK', [('Content-type', 'application/json')])
            return [json.dumps(self.get_stats(), sort_keys=True)]
        start_response('404 Not Found', [])
        return ['404 Not Found']

    def on_error(self, greenlet):
        log.exception(greenlet.exception)
        sys.exit(1)

    def publish(self):
        base_event = dict(type='event', name='change', endpoint='/rc')
        for change in self.queue:
            wiki = change['server_name']
            event = dict(base_event, args=(change,))
            for client in self.sockets.values():
                if match_any(wiki, client.session.get('wikis', ())):
                    client.send_packet(event)

    def subscribe(self):
        pubsub = self.redis_connection.pubsub()
        pubsub.psubscribe('rc.*')
        for message in pubsub.listen():
            if message['type'] == 'pmessage':
                try:
                    data = json.loads(message['data'])
                except ValueError:
                    log.exception('Failed to decode: %(data)s' % message)
                    continue
                self.queue.put(data)


arg_parser = argparse.ArgumentParser(
    description='Broadcast MediaWiki recent changes over WebSockets',
    epilog='See <https://wikitech.wikimedia.org/wiki/rcstream> for more.',
    fromfile_prefix_chars='@',
)
arg_parser.add_argument('server', help='Server address (host:port)',
                        type=parse_address)
arg_parser.add_argument('redis', help='URL of Redis instance',
                        type=redis.StrictRedis.from_url)
arg_parser.add_argument('--verbose', action='store_const', dest='loglevel',
                        const=logging.DEBUG, default=logging.INFO)
arg_parser.add_argument('--logfile', help='Log to this file')
args = arg_parser.parse_args()

logging.basicConfig(filename=args.logfile, level=args.loglevel,
                    format='[%(asctime)s] %(message)s')
log.info('Listening on %s:%s' % args.server)
ChangesPubSub(args.server, args.redis).serve_forever()
